// <auto-generated />
using System;
using System.Collections.Generic;
using EFSandbox.Infrastructure.Common;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EFSandbox.Infrastructure.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20250210193928_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Answers.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answer", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("MultipleChoiceAnswer");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Questions.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "EFSandbox.Domain.QuestionsAggregate.Questions.Question.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("Value")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("CreatedAt");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Description", "EFSandbox.Domain.QuestionsAggregate.Questions.Question.Description#QuestionDescription", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Description");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "EFSandbox.Domain.QuestionsAggregate.Questions.Question.Title#QuestionTitle", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Title");
                        });

                    b.HasKey("Id");

                    b.ToTable("Question", (string)null);

                    b.HasDiscriminator<int>("Type");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey+DraftSurveySchedulingInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTimeOffset>("EndsAt")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(34)
                        .HasColumnType("nvarchar(34)");

                    b.HasKey("Id");

                    b.ToTable("SchedulingInformation", (string)null);

                    b.HasDiscriminator<string>("Type").HasValue("DraftSurveySchedulingInformation");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Survey", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("CreatedAt", "EFSandbox.Domain.SurveysAggregate.Survey.CreatedAt#CreatedAt", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTimeOffset>("Value")
                                .HasColumnType("datetimeoffset")
                                .HasColumnName("CreatedAt");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "EFSandbox.Domain.SurveysAggregate.Survey.Title#SurveyTitle", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(20)
                                .HasColumnType("nvarchar(20)")
                                .HasColumnName("Title");
                        });

                    b.HasKey("Id");

                    b.ToTable("Survey", (string)null);

                    b.HasDiscriminator<int>("Status");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("EFSandbox.Domain.UsersAggregate.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.ComplexProperty<Dictionary<string, object>>("Name", "EFSandbox.Domain.UsersAggregate.User.Name#UserName", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("Name");
                        });

                    b.HasKey("Id");

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("EFSandbox.Infrastructure.Tasks.ScheduleTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ScheduleTask");
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Answers.MultipleChoiceAnswer", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.QuestionsAggregate.Answers.Answer");

                    b.Property<int>("OptionId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MultipleChoiceAnswer");
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Answers.TextAnswer", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.QuestionsAggregate.Answers.Answer");

                    b.ComplexProperty<Dictionary<string, object>>("Response", "EFSandbox.Domain.QuestionsAggregate.Answers.TextAnswer.Response#TextResponse", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(50)
                                .HasColumnType("nvarchar(50)")
                                .HasColumnName("Response");
                        });

                    b.HasDiscriminator().HasValue("TextAnswer");
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Questions.MultipleChoice.MultipleChoiceQuestion", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.QuestionsAggregate.Questions.Question");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Questions.TextQuestion", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.QuestionsAggregate.Questions.Question");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey+Immediate", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey+DraftSurveySchedulingInformation");

                    b.HasDiscriminator().HasValue("Immediate");
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey+Later", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey+DraftSurveySchedulingInformation");

                    b.Property<DateTimeOffset>("StartsAt")
                        .HasColumnType("datetimeoffset");

                    b.HasDiscriminator().HasValue("Later");
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Close.CloseSurvey", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.SurveysAggregate.Survey");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.SurveysAggregate.Survey");

                    b.Property<int>("SchedulingInformationId")
                        .HasColumnType("int");

                    b.HasIndex("SchedulingInformationId");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Ready.ReadySurvey", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.SurveysAggregate.Survey");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Sent.SentSurvey", b =>
                {
                    b.HasBaseType("EFSandbox.Domain.SurveysAggregate.Survey");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Answers.Answer", b =>
                {
                    b.HasOne("EFSandbox.Domain.QuestionsAggregate.Questions.Question", null)
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId");

                    b.HasOne("EFSandbox.Domain.UsersAggregate.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Survey", b =>
                {
                    b.OwnsMany("EFSandbox.Domain.SurveysAggregate.Survey+SurveyQuestion", "Questions", b1 =>
                        {
                            b1.Property<int>("SurveyId")
                                .HasColumnType("int");

                            b1.Property<int>("QuestionId")
                                .HasColumnType("int");

                            b1.Property<int>("Order")
                                .HasColumnType("int");

                            b1.HasKey("SurveyId", "QuestionId", "Order");

                            b1.HasIndex("QuestionId")
                                .IsUnique();

                            b1.ToTable("SurveyQuestion");

                            b1.HasOne("EFSandbox.Domain.QuestionsAggregate.Questions.Question", "Question")
                                .WithOne()
                                .HasForeignKey("EFSandbox.Domain.SurveysAggregate.Survey.Questions#EFSandbox.Domain.SurveysAggregate.Survey+SurveyQuestion", "QuestionId")
                                .OnDelete(DeleteBehavior.Cascade)
                                .IsRequired();

                            b1.WithOwner()
                                .HasForeignKey("SurveyId");

                            b1.Navigation("Question");
                        });

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Questions.MultipleChoice.MultipleChoiceQuestion", b =>
                {
                    b.OwnsMany("EFSandbox.Domain.QuestionsAggregate.Questions.MultipleChoice.MultipleChoiceQuestion+Option", "Options", b1 =>
                        {
                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<int>("MultipleChoiceQuestionId")
                                .HasColumnType("int");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("Id");

                            b1.HasIndex("MultipleChoiceQuestionId");

                            b1.ToTable("Options", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("MultipleChoiceQuestionId");
                        });

                    b.Navigation("Options");
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey", b =>
                {
                    b.HasOne("EFSandbox.Domain.SurveysAggregate.Draft.DraftSurvey+DraftSurveySchedulingInformation", "SchedulingInformation")
                        .WithMany()
                        .HasForeignKey("SchedulingInformationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SchedulingInformation");
                });

            modelBuilder.Entity("EFSandbox.Domain.SurveysAggregate.Ready.ReadySurvey", b =>
                {
                    b.OwnsOne("EFSandbox.Domain.SurveysAggregate.Ready.ReadySurvey+ReadySurveySendingInformation", "SendingInformation", b1 =>
                        {
                            b1.Property<int>("ReadySurveyId")
                                .HasColumnType("int");

                            b1.Property<DateTimeOffset>("EndsAt")
                                .HasColumnType("datetimeoffset");

                            b1.Property<DateTimeOffset>("StartsAt")
                                .HasColumnType("datetimeoffset");

                            b1.HasKey("ReadySurveyId");

                            b1.ToTable("Survey");

                            b1.WithOwner()
                                .HasForeignKey("ReadySurveyId");
                        });

                    b.Navigation("SendingInformation")
                        .IsRequired();
                });

            modelBuilder.Entity("EFSandbox.Domain.QuestionsAggregate.Questions.Question", b =>
                {
                    b.Navigation("Answers");
                });
#pragma warning restore 612, 618
        }
    }
}
